#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ОписаниеКодаСтандарта; // Для преобразования Строки в Число

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Ссылка на стандарты на сайте 1С
// 
// Возвращаемое значение:
//  Строка
//
Функция АдресСтандартовПоУмолчанию() Экспорт
	Возврат "https://its.1c.ru/db/v8std";
КонецФункции

// Анализ страницы со стандартами и подготовка к загрузке стандартов
//
// Параметры:
//  ДеревоРодитель - ДеревоЗначений - информация о стандартах
//  НомерПоПорядку - Число - порядок следования стандартов как на сайте ИТС
//
Процедура АнализСтраницыРекурсивно(ДеревоРодитель, НомерПоПорядку = 0) Экспорт
	
	ДанныеАдреса = ДанныеРесурса(ДеревоРодитель.Адрес);
	ДеревоРодитель.КодСтандарта = ДанныеАдреса.КодСтандарта;
	
	Если ДанныеАдреса.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ДеревоРодитель.Адрес, "hdoc") Тогда
		ДеревоРодитель.КонечныйАдрес = ДанныеАдреса.КонечныйАдрес;
		Возврат;
	КонецЕсли;
	
	ДеревоРодитель.КонечныйАдрес = ДанныеАдреса.Адрес;
	
	ВложенныеСсылки = ДанныеАдреса.ВложенныеСсылки;
	Если ВложенныеСсылки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеСсылки Из ВложенныеСсылки Цикл
		
		НомерПоПорядку = НомерПоПорядку + 1;
		
		НовСтрока = ДеревоРодитель.Строки.Добавить();
		НовСтрока.Адрес = ДанныеСсылки.Адрес;
		НовСтрока.Заголовок = ДанныеСсылки.Заголовок;
		НовСтрока.НомерПоПорядку = НомерПоПорядку;
		
		АнализСтраницыРекурсивно(НовСтрока, НомерПоПорядку);
		
	КонецЦикла;
	
КонецПроцедуры

// Загрузка стандартов в базу
//
// Параметры:
//  ДеревоРодитель - ДеревоЗначений - см. Обработка.ЗагрузкаСтандартов.Форма
//  ТолькоСоздаватьНовые - Булево
//
Процедура АктуализироватьСтандарты(ДеревоРодитель, ТолькоСоздаватьНовые = Ложь) Экспорт
	
	АктуализироватьСтандартыРекурсивно(ДеревоРодитель, ТолькоСоздаватьНовые);
	
	ПолнотекстовыйПоиск.ОбновитьИндекс(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура АктуализироватьСтандартыРекурсивно(ДеревоРодитель, ТолькоСоздаватьНовые)
	
	Для Каждого СтрокаДерева Из ДеревоРодитель.Строки Цикл
		
		ЭтоГруппа = Не ЗначениеЗаполнено(СтрокаДерева.КодСтандарта);
		
		Если НЕ ЭтоГруппа Тогда
			СоздатьОбновитьСтандарт(СтрокаДерева, ТолькоСоздаватьНовые);
			Продолжить;
		КонецЕсли;
		
		СоздатьОбновитьГруппуСтандартов(СтрокаДерева, ТолькоСоздаватьНовые);
		
		АктуализироватьСтандартыРекурсивно(СтрокаДерева, ТолькоСоздаватьНовые);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеРесурса(АдресРесурса, Таймаут = 10, Повторно = Ложь)
	
	ДанныеАдреса = Новый Структура;
	ДанныеАдреса.Вставить("Адрес", АдресРесурса);
	ДанныеАдреса.Вставить("КодСостояния", Неопределено);
	ДанныеАдреса.Вставить("Заголовок", "");
	ДанныеАдреса.Вставить("Ошибка", Ложь);
	ДанныеАдреса.Вставить("ТекстОшибки", "");
	ДанныеАдреса.Вставить("КонечныйАдрес", "");
	ДанныеАдреса.Вставить("АдресСервера", "");
	ДанныеАдреса.Вставить("ВложенныеСсылки", Новый Массив);
	ДанныеАдреса.Вставить("КодСтандарта", "");
	
	СтруктураURI = КоннекторHTTP.РазобратьURL(АдресРесурса);
	
	ДанныеАдреса.АдресСервера = СтруктураURI.Схема + "://" + СтруктураURI.Сервер;
	
	ПараметрыЗапроса = КоннекторHTTP.НовыеПараметры();
	
	ПараметрыЗапроса.Таймаут = Таймаут;
	ПараметрыЗапроса.Заголовки.Вставить("Accept", "text/html;charset=windows-1251");
	Сессия = КоннекторHTTP.СоздатьСессию();
	
	Попытка
		Ответ = КоннекторHTTP.Get(АдресРесурса, ПараметрыЗапроса, Сессия);
	Исключение
		
		// Если не достучались попробуем повторно и увеличим таймаут
		Если Не Повторно Тогда
			Возврат ДанныеРесурса(АдресРесурса, Таймаут * 2, Истина);
		КонецЕсли;
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		
		ДанныеАдреса.Ошибка = Истина;
		ДанныеАдреса.ТекстОшибки = ОбработкаОшибок.СообщениеОбОшибкеДляПользователя(ИнфоОбОшибке);
		
		ЗаписьЖурналаРегистрации("Ошибка получения стандарта с ИТС",
									УровеньЖурналаРегистрации.Ошибка, ,
									АдресРесурса, 
									ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
		Возврат ДанныеАдреса;
	КонецПопытки;
	
	ДанныеАдреса.КодСостояния = Ответ.КодСостояния;
	
	ТелоОтвета = КоннекторHTTP.КакТекст(Ответ, "windows-1251");
	
	Если ДанныеАдреса.КодСостояния <> 200 Тогда
		ДанныеАдреса.Ошибка = Истина;
		ДанныеАдреса.ТекстОшибки = ТелоОтвета;
		Возврат ДанныеАдреса;
	КонецЕсли;
	
	ДанныеАдреса.Заголовок = ПоискЗаголовка(ТелоОтвета);
	ДанныеАдреса.КонечныйАдрес = ДанныеАдреса.АдресСервера + "/" + ПоискКонечногоАдреса(ТелоОтвета);
	ДанныеАдреса.ВложенныеСсылки = ПоискВложенныхСсылок(ТелоОтвета, ДанныеАдреса.АдресСервера);
	ДанныеАдреса.КодСтандарта = ПоискКодаСтандарта(АдресРесурса);
	
	Возврат ДанныеАдреса;
	
КонецФункции

Функция ПоискВложенныхСсылок(Знач Текст, Знач АдресСервера = "")
	
	Ссылки = Новый Массив;
	
	// Обрезаем всё до "nav list", чтобы было меньше мусора
	НачальнаяПозицияПоиска = СтрНайти(Текст, "class=""nav list""");
	Если НачальнаяПозицияПоиска > 0 Тогда
		Текст = Сред(Текст, СтрНайти(Текст, "class=""nav list"""));
	КонецЕсли;
	
	// Ищем все href в блоке <a ... /a>"
	РегулярноеВыражение = "<a\s+href=""([^""]*)"">([^<]*)<\/a>";
	
	МассивРезультат = СтрНайтиВсеПоРегулярномуВыражению(Текст, РегулярноеВыражение, Истина);
	Для Каждого Результат Из МассивРезультат Цикл
		
		СтрокаЗначение = Результат.Значение;
		
		Начало = СтрНайти(СтрокаЗначение, "href=");
		Если Начало = 0 Тогда
			Продолжить;
		КонецЕсли;
		Начало = Начало + 6;
		Конец = СтрНайти(СтрокаЗначение, ">") - 1;
		
		Адрес = Сред(СтрокаЗначение, Начало, Конец - Начало);
		
		СтрокаЗначение = Сред(СтрокаЗначение, Конец, СтрДлина(СтрокаЗначение));
		
		Начало = СтрНайти(СтрокаЗначение, ">");
		Если Начало = 0 Тогда
			Продолжить;
		КонецЕсли;
		Начало = Начало + 1;
		Конец = СтрНайти(СтрокаЗначение, "<");
		Заголовок = Сред(СтрокаЗначение, Начало, Конец - Начало);
		Заголовок = СтрЗаменить(Заголовок, "&quot;", "");
		Заголовок = УдалитьСлужебныйТекстИзЗаголовка(Заголовок);
		
		Ссылки.Добавить(Новый Структура("Заголовок, Адрес", Заголовок, АдресСервера + Адрес));
		
	КонецЦикла;
	
	Возврат Ссылки;
	
КонецФункции

Функция ПоискЗаголовка(Текст)
	
	// Ищем title в блоке <h1 ... >"
	РегулярноеВыражение = "<h1[^>]*title=""([^""]*)""[^>]*>";
	
	Значение = СтрНайтиПоРегулярномуВыражению(Текст, РегулярноеВыражение, , , , Истина).Значение;
	Значение = СтрЗаменить(Значение, "&quot;", "");
	Значение = Сред(Значение, СтрНайти(Значение, "title") + 7, СтрДлина(Значение));
	Значение = Лев(Значение, СтрДлина(Значение) - 2);
	
	Значение = УдалитьСлужебныйТекстИзЗаголовка(Значение);
	
	Возврат Значение;
	
КонецФункции

Функция ПоискКодаСтандарта(Текст)
	
	// Ищем всё что находится между content и hdoc 
	РегулярноеВыражение = "content/(\d\s*)+/hdoc";
	
	Значение = СтрНайтиПоРегулярномуВыражению(Текст, РегулярноеВыражение, , , , Истина).Значение;
	Значение = СтрЗаменить(Значение, "&quot;", "");
	Значение = СтрЗаменить(Значение, "content/", "");
	Значение = СтрЗаменить(Значение, "/hdoc", "");
	Значение = СтрЗаменить(Значение, " ", "");
	
	Возврат Значение;
	
КонецФункции

Функция ПоискКонечногоАдреса(Текст)
	
	// Ищем href в блоке <base ... >"
	РегулярноеВыражение = "<base[^>]*id=[^>]*href=""([^""]*)""";
	
	Значение = СтрНайтиПоРегулярномуВыражению(Текст, РегулярноеВыражение, , , , Истина).Значение;
	Значение = СтрЗаменить(Значение, "&quot;", "");
	Значение = Сред(Значение, СтрНайти(Значение, "href=") + 7, СтрДлина(Значение));
	Значение = Лев(Значение, СтрДлина(Значение) - 1);
	
	Возврат Значение;
	
КонецФункции

Процедура ЗаменаСсылокНаКартинкиBase64(АдресСтраницы, ТекстХТМЛ)
	
	ПоследнийСлеш = СтрНайти(АдресСтраницы, "/", НаправлениеПоиска.СКонца);
	БазовыйАдресКартинок = Лев(АдресСтраницы, ПоследнийСлеш);
	ТегиСКартинками = АдресаКартинок(ТекстХТМЛ);
	
	Для Каждого РезультатПоиска Из ТегиСКартинками Цикл
		ИсходныйТег = РезультатПоиска.Значение;
		
		НачалоСсылкиНаКартинку = СтрНайти(ИсходныйТег, "src=""") + 5;
		КонецСсылкиНаКартинку = СтрНайти(ИсходныйТег, """", , НачалоСсылкиНаКартинку);
		ОтносительнаяСсылкаНаКартинку = 
			Сред(ИсходныйТег, НачалоСсылкиНаКартинку, КонецСсылкиНаКартинку - НачалоСсылкиНаКартинку);
		
		АбсолютнаяСсылкаНаКартинку = БазовыйАдресКартинок + ОтносительнаяСсылкаНаКартинку;
		ДанныеКартинки = КоннекторHTTP.КакДвоичныеДанные(КоннекторHTTP.Get(АбсолютнаяСсылкаНаКартинку));
		КартинкаBase64 = Base64Строка(ДанныеКартинки);
		
		НачалоПараметровЗапроса = СтрНайти(ОтносительнаяСсылкаНаКартинку, "?");
		Если НачалоПараметровЗапроса > 0 Тогда
			ТочкаПередРасширением = 
				СтрНайти(ОтносительнаяСсылкаНаКартинку, ".", НаправлениеПоиска.СКонца, НачалоПараметровЗапроса);
			РасширениеКартинки = Сред(ОтносительнаяСсылкаНаКартинку, ТочкаПередРасширением + 1,
										НачалоПараметровЗапроса - ТочкаПередРасширением - 1);
		Иначе
			ТочкаПередРасширением = СтрНайти(ОтносительнаяСсылкаНаКартинку, ".", НаправлениеПоиска.СКонца);
			РасширениеКартинки = Сред(ОтносительнаяСсылкаНаКартинку, ТочкаПередРасширением + 1);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РасширениеКартинки) Тогда
			РасширениеКартинки = "png";
		КонецЕсли;
		
		ИсходнаяСсылкаНаКартинку = СтрШаблон("src=""%1""", ОтносительнаяСсылкаНаКартинку);
		НоваяСсылкаНаКартинку = СтрШаблон("src=""data:image/%1;base64,%2""", РасширениеКартинки, КартинкаBase64);
		
		НовыйТег = СтрЗаменить(ИсходныйТег, ИсходнаяСсылкаНаКартинку, НоваяСсылкаНаКартинку);
		
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, ИсходныйТег, НовыйТег);
	КонецЦикла;
	
КонецПроцедуры

Функция АдресаКартинок(ТекстХТМЛ)
	
	// Ищем src в блоках <img ... >"
	РегулярноеВыражение = "<img\s[^>]*?src\s*=\s*['\""]([^'\""]*?)['\""][^>]*?>";
	Возврат СтрНайтиВсеПоРегулярномуВыражению(ТекстХТМЛ, РегулярноеВыражение, Истина);
	
КонецФункции

#Область АктуализацияСправочникаСтандарты

Процедура СоздатьОбновитьСтандарт(СтрокаДерева, ТолькоСоздаватьНовые = Ложь)
	
	КодСтандарта = ОписаниеКодаСтандарта.ПривестиЗначение(СтрокаДерева.КодСтандарта);
	
	Если ЗначениеЗаполнено(КодСтандарта) Тогда
		СтандартСсылка = Справочники.СтандартыРазработки.НайтиПоКодуСтандарта(КодСтандарта);
	Иначе
		СтандартСсылка = СтандартПоНаименованию(СтрокаДерева.Заголовок);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтандартСсылка) Тогда
		СтрокаДерева.Стандарт = СтандартСсылка;
		
		Если СтрокаДерева.СтандартОбработан ИЛИ ТолькоСоздаватьНовые Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			СтандартОбъект = СтандартСсылка.ПолучитьОбъект();
		Исключение 
			ЗаписьЖурналаРегистрации("Ошибка получения объекта",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.СтандартыРазработки,
										СтандартСсылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
	Иначе
		СтандартОбъект = Справочники.СтандартыРазработки.СоздатьЭлемент();
		СтандартОбъект.Внешний = Истина;
		СтандартОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтандартОбъект.ДатаИзменения = ТекущаяДатаСеанса();
	СтандартОбъект.Наименование = СтрокаДерева.Заголовок;
	СтандартОбъект.НомерПоПорядку = СтрокаДерева.НомерПоПорядку;
	
	СтандартОбъект.КодСтандарта = КодСтандарта;
	СтандартОбъект.АдресСодержания = СтрокаДерева.КонечныйАдрес;
	
	ТекстСтандартаХТМЛ = СодержаниеСтандартаХТМЛ(СтандартОбъект.АдресСодержания);
	ЗаменаСсылокНаКартинкиBase64(СтандартОбъект.АдресСодержания, ТекстСтандартаХТМЛ);
	
	СтандартОбъект.УстановитьСодержаниеСтандарта(ТекстСтандартаХТМЛ);
	
	Если Не СтрокаДерева.Родитель = Неопределено Тогда
		СтандартОбъект.Родитель = СтрокаДерева.Родитель.Стандарт;
	КонецЕсли;
	
	СтандартОбъект.СсылкаНаСтандарт = СтрокаДерева.Адрес;
	
	Попытка
		СтандартОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка записи объекта",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.СтандартыРазработки,
										СтандартСсылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтрокаДерева.СтандартОбработан = Истина;
	СтрокаДерева.Стандарт = СтандартОбъект.Ссылка;
	
КонецПроцедуры

Процедура СоздатьОбновитьГруппуСтандартов(СтрокаДерева, ТолькоСоздаватьНовые = Ложь)
	
	СтандартСсылка = СтандартПоНаименованию(СтрокаДерева.Заголовок, Истина);
	
	СтандартОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(СтандартСсылка) Тогда
		СтрокаДерева.Стандарт = СтандартСсылка;
		
		Если СтрокаДерева.СтандартОбработан ИЛИ ТолькоСоздаватьНовые Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			СтандартОбъект = СтандартСсылка.ПолучитьОбъект();
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка получения объекта",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.СтандартыРазработки,
										СтандартСсылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	Иначе
		СтандартОбъект = Справочники.СтандартыРазработки.СоздатьГруппу();
	КонецЕсли;
	
	СтандартОбъект.Наименование = СтрокаДерева.Заголовок;
	СтандартОбъект.НомерПоПорядку = СтрокаДерева.НомерПоПорядку;
	
	Если Не СтрокаДерева.Родитель = Неопределено Тогда
		СтандартОбъект.Родитель = СтрокаДерева.Родитель.Стандарт;
	КонецЕсли;
	
	СтандартОбъект.СсылкаНаСтандарт = СтрокаДерева.Адрес;
	
	Попытка
		СтандартОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка записи объекта",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.СтандартыРазработки,
										СтандартСсылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтрокаДерева.СтандартОбработан = Истина;
	СтрокаДерева.Стандарт = СтандартОбъект.Ссылка;
	
КонецПроцедуры

Функция СтандартПоНаименованию(Заголовок, ЭтоГруппа = Ложь)
	
	Перем Выборка, Запрос;
	
	// Тех. долг. Запрос в цикле.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	|	СтандартыРазработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтандартыРазработки КАК СтандартыРазработки
	|ГДЕ
	|	СтандартыРазработки.ЭтоГруппа = &ЭтоГруппа
	|	И СтандартыРазработки.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	Запрос.УстановитьПараметр("Наименование", Заголовок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.СтандартыРазработки.ПустаяСсылка();

КонецФункции

Функция СодержаниеСтандартаХТМЛ(СсылкаНаСодержание)
	
	СодержаниеХТМЛ = КоннекторHTTP.КакТекст(КоннекторHTTP.Get(СсылкаНаСодержание), "windows-1251");
	СодержаниеХТМЛ = СтрЗаменить(СодержаниеХТМЛ, Символы.ПС, "");
	// замена кодировки для уменьшения проблем в будущем
	СодержаниеХТМЛ = СтрЗаменить(СодержаниеХТМЛ, "charset=windows-1251", "charset=utf-8");
	
	Возврат СодержаниеХТМЛ;
	
КонецФункции

Функция УдалитьСлужебныйТекстИзЗаголовка(Знач Заголовок)
	
	Результат = СтрЗаменить(Заголовок, "(Новый раздел!)", "");
	Результат = СтрЗаменить(Результат, "(Раздел обновлен!)", "");
	
	Возврат СокрЛП(Результат);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ОписаниеКодаСтандарта = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный));

#КонецОбласти

#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
