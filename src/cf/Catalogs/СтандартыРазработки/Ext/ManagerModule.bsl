#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Поиск стандарта по коду, числовому или строковому
//
// Параметры:
//  КодСтандарта - Число, Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.СтандартыРазработки
//
Функция НайтиПоКодуСтандарта(Знач КодСтандарта) Экспорт
	
	Если Не ЗначениеЗаполнено(КодСтандарта) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(КодСтандарта) = Тип("Строка") Тогда
		ОписаниеКодаСтандарта = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный));
		КодСтандарта = ОписаниеКодаСтандарта.ПривестиЗначение(КодСтандарта);
	КонецЕсли;
	
	Возврат НайтиПоРеквизиту("КодСтандарта", КодСтандарта);
	
КонецФункции

// Получает все стандарты в виде дерева
// 
// Возвращаемое значение:
//  ДеревоЗначений
//
Функция ДеревоСтандартов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтандартыРазработки.Ссылка КАК Ссылка,
	|	СтандартыРазработки.Наименование КАК Наименование,
	|	СтандартыРазработки.КодСтандарта КАК КодСтандарта,
	|	СтандартыРазработки.СсылкаНаСтандарт КАК СсылкаНаСтандарт,
	|	СтандартыРазработки.СодержаниеСтандартаHTML КАК СодержаниеСтандартаHTML,
	|	СтандартыРазработки.НеИспользуется КАК НеИспользуется,
	|	НЕ СтандартыРазработки.НеИспользуется КАК Выбран
	|ИЗ
	|	Справочник.СтандартыРазработки КАК СтандартыРазработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ,
	|	СтандартыРазработки.НомерПоПорядку,
	|	СтандартыРазработки.КодСтандарта";
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат Дерево;
	
КонецФункции

// Значение реквизита СодержаниеСтандартаHTML
//
// Параметры:
//  СтандартРазработки - СправочникСсылка.СтандартыРазработки
// 
// Возвращаемое значение:
//  Строка
//
Функция СодержаниеСтандартаHTML(Знач СтандартРазработки) Экспорт
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтандартыРазработки.СодержаниеСтандартаHTML КАК СодержаниеСтандартаHTML
	|ИЗ
	|	Справочник.СтандартыРазработки КАК СтандартыРазработки
	|ГДЕ
	|	СтандартыРазработки.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СтандартРазработки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СодержаниеСтандартаHTML;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конвертирует HTML-содержимое стандарта в PDF в виде двоичных данных c помощью wkhtmltopdf
//
// Параметры:
//  СтандартРазработки  - СправочникСсылка.СтандартыРазработки
//
// Возвращаемое значение:
//   ДвоичныеДанные   - PDF
//
Функция СодержимоеСтандартаВPDFДвоичныеДанные(Знач СтандартРазработки) Экспорт
	
	СодержаниеСтандартаХТМЛ = СодержаниеСтандартаHTML(СтандартРазработки);
	ЗаменитьСсылкиНаАбсолютные(СодержаниеСтандартаХТМЛ);
	
	Попытка
		
		Возврат РаботаСPDF.КонвертироватьHTMLвPDF(СодержаниеСтандартаХТМЛ, "ДвоичныеДанные");
		
	Исключение
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации("Ошибка конвертации HTML в PDF",
			УровеньЖурналаРегистрации.Ошибка, ,
			СтандартРазработки,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
			
		ВызватьИсключение ОбработкаОшибок.СообщениеОбОшибкеДляПользователя(ИнфоОбОшибке);
		
	КонецПопытки;
	
КонецФункции

// Конвертирует HTML-содержимое стандарта в PDF в виде файла c помощью wkhtmltopdf
//
// Параметры:
//  СтандартРазработки  - СправочникСсылка.СтандартыРазработки
//
// Возвращаемое значение:
//   ДвоичныеДанные   - PDF
//
Функция СодержимоеСтандартаВPDF(Знач СтандартРазработки) Экспорт
	
	СодержаниеСтандартаХТМЛ = СодержаниеСтандартаHTML(СтандартРазработки);
	ЗаменитьСсылкиНаАбсолютные(СодержаниеСтандартаХТМЛ);
	
	Возврат РаботаСPDF.КонвертироватьHTMLвPDF(СодержаниеСтандартаХТМЛ, "ПутьКФайлу");
	
КонецФункции

// Получение элемента справочника СтандартыРазработки по его URL-адресу
//
// Параметры:
//  СсылкаНаСтандартИТС - Строка - url-ссылка на стандарт
// 
// Возвращаемое значение:
//  СправочникСсылка.СтандартыРазработки
//
Функция СтандартПоСсылкеИТС(Знач СсылкаНаСтандартИТС) Экспорт
	
	Результат = Справочники.СтандартыРазработки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтандартыРазработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтандартыРазработки КАК СтандартыРазработки
	|ГДЕ
	|	СтандартыРазработки.СсылкаНаСтандарт = &СсылкаНаСтандарт";
	Запрос.УстановитьПараметр("СсылкаНаСтандарт", СсылкаНаСтандартИТС);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоГруппаСтандартов(Знач СтандартРазработки) Экспорт
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтандартыРазработки.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.СтандартыРазработки КАК СтандартыРазработки
	|ГДЕ
	|	СтандартыРазработки.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СтандартРазработки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ЭтоГруппа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаменитьСсылкиНаАбсолютные(СодержаниеСтандартаХТМЛ)
	
	РегулярноеВыражение = "href=\""\/db\/v8std\/content\/\d+\/hdoc\""";
	ОтносительныеСсылки = СтрНайтиВсеПоРегулярномуВыражению(СодержаниеСтандартаХТМЛ, РегулярноеВыражение, Истина);
	
	Для Каждого НайденнаяСсылка Из ОтносительныеСсылки Цикл
		ОтносительнаяСсылка = НайденнаяСсылка.Значение;
		АбсолютнаяСсылка = СтрЗаменить(ОтносительнаяСсылка, "/db/v8std/content/", "https://its.1c.ru/db/v8std/content/");
		СодержаниеСтандартаХТМЛ = СтрЗаменить(СодержаниеСтандартаХТМЛ, ОтносительнаяСсылка, АбсолютнаяСсылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
