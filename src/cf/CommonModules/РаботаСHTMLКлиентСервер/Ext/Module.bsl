#Область ПрограммныйИнтерфейс

// Вырезает содержимое первого вхождения тега в отдельную переменную
//
// Параметры:
//  ТекстHTML - Строка
//  Тег - Строка
//  СодержимоеТега - Строка - вырезанное содержимое тега
//
Процедура ВырезатьСодержимоеТега(ТекстHTML, Тег, СодержимоеТега) Экспорт
	
	ГраницыТега = НайтиТег(ТекстHTML, Тег);
	Если ГраницыТега.НачалоТега > 0 И ГраницыТега.КонецТега > 0 Тогда
		СодержимоеТега = Сред(ТекстHTML, ГраницыТега.КонецНачалаТега + 1, ГраницыТега.ДлинаСодержимого);
		ТекстHTML = Лев(ТекстHTML, ГраницыТега.КонецНачалаТега) + Сред(ТекстHTML, ГраницыТега.НачалоКонцаТега);
	КонецЕсли;
	
КонецПроцедуры

// Заменяет содержимое первого вхождения тега на переданный текст
//
// Параметры:
//  ТекстHTML - Строка
//  Тег - Строка
//  СодержимоеТега - Строка - новое содержимое тега
//
Процедура ЗаменитьСодержаниеТега(ТекстHTML, Тег, СодержимоеТега) Экспорт
	
	ГраницыТега = НайтиТег(ТекстHTML, Тег);
	
	Если ГраницыТега.НачалоТега > 0 И ГраницыТега.КонецТега > 0 Тогда
		ТекстHTML = Лев(ТекстHTML, ГраницыТега.КонецНачалаТега) + СодержимоеТега + Сред(ТекстHTML, ГраницыТега.НачалоКонцаТега);
	КонецЕсли;
	
КонецПроцедуры

// Извлекает только текст из HTML
//
// Параметры:
//  ТекстHTML - Строка - HTML-текст со всеми тегами
//
// Возвращаемое значение:
//  Строка - очищенный от всех тегов текст
//
Функция ТекстИзHTML(ТекстHTML) Экспорт
	
	// Чтобы слова в конце и начале соседних блоков не слипались
	ТекстHTML = СтрЗаменить(ТекстHTML, "<", " <");
	ХТМЛДокумент = ПолучитьДокументHTML(ТекстHTML);
	ТолькоТекст = ХТМЛДокумент.ИзвлечьТолькоТекст();
	// Немного сократим лишние пробелы
	ТолькоТекст = СтрЗаменить(ТолькоТекст, "     ", " ");
	ТолькоТекст = СтрЗаменить(ТолькоТекст, "    ", " ");
	ТолькоТекст = СтрЗаменить(ТолькоТекст, "   ", " ");
	ТолькоТекст = СтрЗаменить(ТолькоТекст, "  ", " ");
	Возврат ТолькоТекст;
	
КонецФункции

// Ссылка на стандарт на сайте its.1c.ru на основании внутренней ссылки из HTML
//
// Параметры:
//  СсылкаИзХТМЛ - Строка - вида e1c://filev/db/v8std/content/792/hdoc
//
// Возвращаемое значение:
//  Строка - ссылка вида https://its.1c.ru/db/v8std/content/792/hdoc
//
Функция СсылкаНаИТС(СсылкаИзХТМЛ) Экспорт
	
	СсылкаНаСтандартИТС = СтрЗаменить(СсылкаИзХТМЛ, "e1c://filev", "");
	СсылкаНаСтандартИТС = "https://its.1c.ru" + СсылкаНаСтандартИТС;
	
	Возврат СсылкаНаСтандартИТС;
	
КонецФункции

// Замена спецсимволов на безопасный текст
//
// Параметры:
//  Текст - Строка - HTML-текст
// 
// Возвращаемое значение:
//  Строка - безопасный HTML-текст
//
Функция ЭкранироватьHTML(Знач Текст) Экспорт
	
	Если Текст = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "&", "&amp;");
	Текст = СтрЗаменить(Текст, "<", "&lt;");
	Текст = СтрЗаменить(Текст, ">", "&gt;");
	Текст = СтрЗаменить(Текст, """", "&quot;");
	Текст = СтрЗаменить(Текст, "'", "&apos;");
	Текст = СтрЗаменить(Текст, Символы.НПП, "&nbsp;");
	
	Возврат Текст;
	
КонецФункции

// Экранируем спецсимволы PCRE: \ . + * ? [ ] ( ) { } ^ $ |
//
// Параметры:
//  Текст - Строка
// 
// Возвращаемое значение:
//  Строка - экранированная строка для регулярного выражения
//
Функция ЭкранироватьРегулярноеВыражение(Текст) Экспорт
	
	М = Новый Соответствие;
	
	Для Каждого С Из СтрРазделить("\ . + * ? [ ] ( ) { } ^ $ |", " ") Цикл
		Если С <> "" Тогда М.Вставить(С, "\" + С); КонецЕсли;
	КонецЦикла;
	
	Для Каждого Пара Из М Цикл
		Текст = СтрЗаменить(Текст, Пара.Ключ, Пара.Значение);
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиТег(ТекстHTML, Тег)
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоТега", 0); // __<__STYLE font=Arial>dadada</style>
	Результат.Вставить("КонецНачалаТега", 0); // <STYLE font=Arial__>__dadada</style>
	Результат.Вставить("НачалоКонцаТега", 0); // <STYLE font=Arial>dadada__<__/style>
	Результат.Вставить("КонецТега", 0); // <STYLE font=Arial>dadada</style__>__
	Результат.Вставить("ДлинаСодержимого", 0);
	
	Результат.НачалоТега = СтрНайти(ТекстHTML, СтрШаблон("<%1", НРег(Тег)));
	Если Результат.НачалоТега = 0 Тогда
		Результат.НачалоТега = СтрНайти(ТекстHTML, СтрШаблон("<%1", ВРег(Тег)));
	КонецЕсли;
	
	Если Результат.НачалоТега > 0 Тогда
		Результат.КонецНачалаТега = СтрНайти(ТекстHTML, ">", , Результат.НачалоТега);
		Если Результат.КонецНачалаТега = 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не найдено закрытие начала тега %1 (>). Некорректный HTML.'"), Тег);
		КонецЕсли;
		
		Результат.НачалоКонцаТега = СтрНайти(ТекстHTML, СтрШаблон("</%1>", НРег(Тег)));
		Если Результат.НачалоКонцаТега = 0 Тогда
			Результат.НачалоКонцаТега = СтрНайти(ТекстHTML, СтрШаблон("</%1>", ВРег(Тег)));
		КонецЕсли;
		Если Результат.НачалоКонцаТега = 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не найдено закрытие тега </%1>. Некорректный HTML.'"), Тег);
		КонецЕсли;
		
		Результат.КонецТега = Результат.НачалоКонцаТега + СтрДлина(СтрШаблон("</%1>", Тег)) - 1;
		
	КонецЕсли;
	
	Результат.ДлинаСодержимого = Результат.НачалоКонцаТега -1 - Результат.КонецНачалаТега;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДокументHTML(СтрокаHTML)
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(СтрокаHTML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	ЧтениеHTML.Закрыть();
	
	Возврат ДокументHTML;
	
КонецФункции

#КонецОбласти